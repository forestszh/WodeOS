How to Build ttylinux
Copyright (C) 2008-2012 Douglas Jerome <douglas@ttylinux.org>

Some sections of this document are derived from ttylinux-src-7.0/REAME written
by Pascal Schmidt; some text copyright (C) Pascal Schmidt.


How_To_Build_ttylinux.txt
June 1, 2013


01jun13	drj	Moved some content into other files.
01jun13	drj	Fixed out-of-date information.  Added some more information.
30mar13	drj	Fixed typos.
13mar12	drj	Added fixes for some common problems.
04mar12	drj	Changed for new build process.
22apr11	drj	Changed "make iso" to "make boot".
22apr11	drj	Tried to make some things more clear.
20feb11	drj	Updated for change to xbuildtool, replaces cross-tools.
25dec10	drj	Updated for latest cross-tools.
13nov10	drj	Changed "ttylinux.dist-config.sh" to "ttylinux-config.sh".
03aug10	drj	Changed "make bootcd" to "make iso".
11mar10	drj	Fixups for clarity and the 9.2/10.0 release.
07sep09	drj	Final fixups for 9.0 release.
22aug09	drj	Fixups for clarity (I hope) and x86_64.
22dec08	drj	RCS timestamp check.
09dec08	drj	Small fixups.
28nov08	drj	Corrected some of the Bug Reports and Help text.
25nov08	drj	Added license, requirements and help information.
23nov08	drj	Finished and baselined first version for ttylinux.


                ------------------------------------------------


How to Build ttylinux

-- Document Outline --
1. Introduction
2. Licenses
3. Building Requirements
4. Build a Cross-compiling Tool Chain
5. Build ttylinux
   5.1. Selecting the Platform Configuration
   5.2. Downloading Source Packages
   5.3. Running the Make Command
   5.4. Build an Individual Package
   5.5. Continuing or Resuming Build of Packages
6. Build Results
7. Common Problems
8. Bug Reports and Help


===============
1. Introduction
===============

In the following descriptions there are example commands; they are prefixed by
a shell prompt of "$ ", and comments to shell commands begin with the shell
comment character '#".


===========
2. Licenses
===========

The ttylinux xbuildtool:
- guide document is licensed under the FSF FDL1
- make system is licensed under the FSF GPL2
- components are GNU and Linux kernel projects licensed under FSF GPL
  versions 2 or 3.

The ttylinux make system, documents, and the base file system package are all
licensed under the GNU General Public License (GPL), a copy of which you can
find in the file doc/COPYING.

The component source packages, in the pkg-src/ directory, are licensed under a
number of different licenses.  The License section of the User Guide,
doc/User_Guide.html, has an overview of the packages' licenses.  For more
details, refer to the source packages.


========================
3. Building Requirements
========================

To build ttylinux you need the build system, which contains this file so you
must already have it, and the individual source packages that need to be stored
in the pkg-src/ directory.

The ttylinux build system is hosted in GitHub:

     GitHub repo ...... https://github.com/djerome/ttylinux.git
     Latest Release ... https://github.com/djerome/ttylinux/tarball/master

A tarball of the build system is accessible from the ttylinux web page:

     Web Page, General ........ http://ttylinux.net/
     Web Page, Build System ... http://ttylinux.net/buildsys.html

The build process creates device nodes, sets ownership and privileges for
root-owned files and mounts loopback file system images; therefore, you need to
be root, uid 0 and guid 0, to run the build process.

You will need at least 750 MB of free disk space to complete the build; the
first build process includes building a cross-compiler tool chain with a full
cross-building Binutils, GCC and GLIBC.  Subsequent ttylinux builds use an
xbuildtool cross-compiling tool chain and require about 400 MB.  These are
estimates for making the smallest cross-compiling tool chain and making the
smallest ttylinux variant; you may end up needing 1.5 to 2 GB.

On a 2.1 Ghz dual Athlon MP 2800 with 1.5 GB of RAM:
i486 xbuildtool chain build ...... 54:55.47 elapsed time, 147% CPU utilization
x86_64 xbuildtool chain build .... 56:38.42 elapsed time, 149% CPU utilization
i486 ttylinux build .............. 34:13.02 elapsed time, 105% CPU utilization
x86_64 ttylinux build ............ 33:47.21 elapsed time, 109% CPU utilization

On ThinkPad W500 with Core(tm)2 Duo P8600 at 2.4 Ghz with 2.0 GB of RAM:
i486 xbuildtool chain build ...... 25:59.91 elapsed time, 155% CPU utilization
x86_64 xbuildtool chain build .... 27:14.13 elapsed time, 156% CPU utilization
i486 ttylinux build .............. 17:44.04 elapsed time, 108% CPU utilization
x86_64 ttylinux build ............ 18:17.83 elapsed time, 107% CPU utilization

Software Requirements
---------------------

ttylinux is actively developed on a custom Linux distribution; there is not an
officially supported Linux distribution used for ttylinux development.

xbuildtool digression:
     xbuildtool is a ttylinux project; it is used to build at least one cross-
     compiling tool chain, which in turn is used to build a ttylinux.  A
     cross-compiling tool chain is a set of tools consisting of Binutils, GCC
     and GLIBC with Linux kernel header files all targeting a Linux different
     from the host system's Linux; it is built first, then the cross-compiling
     tool chain is used to build ttylinux.
     The goal is that a cross-compiling tool chain can be built on almost any
     recent version of Linux, and that enables the building of a single
     configuration of ttylinux from almost any different Linux host.  For
     example: The i486 target cross-compiling tool chain can be built on almost
     any recent Linux system, and each one of those i486 target cross-compiling
     tool chains may be different from each other as each is appropriately
     built for the differing host systems; however, each of these different
     cross-compiling tool chain is the same version of Binutls+GCC+GLIBC and
     they all cross-build the same i486 code, resulting in all building the
     same i486 ttylinux code.

The following are the software development tools and their versions that are
used to develop and maintain the ttylinux cross-compiling tool chains and
ttylinux.  Roughly the same versions installed on a typical Linux distribution
ought to work.

     Tool                   Notes
     ----------------       -------
     autoconf-2.68
     automake-1.11.6
     bash-4.2.39
     binutils-2.22
     bison-2.5
     bzip2-1.0.6
     coreutils-8.15
     diffutils-3.2
     dev86-0.16.18 ........ for building lilo
     findutils-4.5.10
     flex-2.5.35
     gawk-4.0.1 ........... only Gnu awk will work
     gcc-4.7.2
     gettext-0.18.1
     glibc-2.15 ........... version probably doesn't much matter
     grep-2.14
     gzip-1.4
     libtool-2.4.2
     m4-1.4.16
     make-3.82
     ncurses-5.9
     patch-2.6.1
     perl-5.14 ............ probably not used
     sed-4.2.1
     tar-1.26
     texinfo-4.13a
     xz-5.1.2a


=====================================
4. Build a Cross-compiling Tool Chain
=====================================

You do NOT need to be root to make a cross-compiling tool chain.

ttylinux uses a cross-compiler tool set that needs to be setup.  The setup
downloads the source packages for Binutils, GCC, and Linux, then compiles these
with your system's compiler to create the cross-building tool chain.

xbuildtool is outside the ttylinux directory.  xbuildtool can build multiple
different cross-compiling tool chains; these cross-compiling tool chains may
have different versions of Binutils, GCC, GLIBC and Linux kernel header files.

xbuildtool is setup to make standard cross-compiling tool chains for ttylinux;
go to the xbuildtool-x.x directory and type "make help" to find out how to
make a cross-compiling tool chains for ttylinux.

The "make setup" command prepares xbuildtool for building tool chains.  The
process of making a tool chain begins by downloading the needed source code
packages; over 100 MB will be downloaded, be patient.

Read the file xbuildtool-x.x/config/xbt-build-config.sh to learn how to make
your own custom cross-compiling tool chain.

=================
5. Build ttylinux
=================

You need to be root, uid and gid both need to be 0.

If you don't want to be root, then the make commands can be prefaced with
"sudo" or "su -c", where needed; see the examples below.

-----------------------------------------
5.1. Selecting the Platform Configuration
-----------------------------------------

The ttylinux build system: it builds ttylinux for a given platform
configuration; the platform is the hardware system, such as an i686 PC or
Macintosh G4, etc.

Before building, you select the platform configuration with this command:

     $ make getcfg   # No need to be root for this.

You will be given a list of platform configurations; select one by typing the
number in the list and then the Enter key.  Be careful about similar names like
pc_i486-bigconfig and pc_i486-defconfig.

--------------------------------
5.2. Downloading Source Packages
--------------------------------

In the ttylinux directory, give this command to download source packages:

     $ make dload   # No need to be root for this.

This makes the package list for this build configuration; see the file
ttylinux-pkglst.txt after giving the "make dload" command.

You may already have all the needed source packages.  Copy any source packages
to ~/Download and the "make dload" command will get them from there, as a local
cache.

Different ttylinux targets have different components, so you need to run
"make dload" at least once for each different ttylinux target you want to
build.

-----------------------------
5.3. Running the Make Command
-----------------------------

In the ttylinux directory, try "make help".

Now give one of these make commands:

     $ make dist
     $ sudo make dist     # May need your password.
     $ su -c 'make dist'  # Needs root password.

or try these:

     $ make clean
     $ make init
     $ make pkgs
     $ make fsys
     $ make kernel
     $ make distdir
     $ make distimg
or
     $ sudo make clean
     $ sudo make init
     $ sudo make pkgs
     $ sudo make fsys
     $ sudo make kernel
     $ sudo make distdir
     $ sudo make distimg
or
     $ su -c 'make clean'
     $ su -c 'make init'
     $ su -c 'make pkgs'
     $ su -c 'make fsys'
     $ su -c 'make kernel'
     $ su -c 'make distdir'
     $ su -c 'make distimg'

Note About True Cross-building With xbuildtools:
     GLIBC is built with, and is a part of, the cross-compiling tool chains
     built with xbuildtool; it is configured with something like
     "--enable-kernel=2.6.0" and built against the Linux kernel headers files
     used by the cross tool chain.  All other ttylinux packages are cross-built
     against this GLIBC and its Linux kernel header files.  Please, don't use a
     custom Linux kernel that is older than the cross-tool Linux kernel
     headers, or your nose will fall off and you'll get a bunch of pimples.

--------------------------------
5.4. Build an Individual Package
--------------------------------

An individual package that has a proper pkg-cfg directory, whether it is in the
package list or not, can be built; the following example builds the bash
package.

     $ make PACKAGE=bash-4.2 bash-4.2
or
     $ sudo make PACKAGE=bash-4.2 bash-4.2
or
     $ su -c 'make PACKAGE=bash-4.2 bash-4.2'

This command can be performed anytime after "make init", but is likely to fail
if the ttylinux-basefs-1.0, ttylinux-devfs-1.0 if needed, and the glibc
packages haven't yet been built.  As an example for the pc_i486-defconfig
ttylinux, if you haven't yet built any packages then you need to do the
following in the order shown:

     $ make init
     $ make PACKAGE=ttylinux-basefs-1.0 ttylinux-basefs-1.0
     $ make PACKAGE=ttylinux-devfs-1.0 ttylinux-devfs-1.0
     $ make PACKAGE=glibc-2.9 glibc-2.9
or
     $ sudo make init
     $ sudo make PACKAGE=ttylinux-basefs-1.0 ttylinux-basefs-1.0
     $ sudo make PACKAGE=ttylinux-devfs-1.0 ttylinux-devfs-1.0
     $ sudo make PACKAGE=glibc-2.9 glibc-2.9
or
     $ su -c 'make init'
     $ su -c 'make PACKAGE=ttylinux-basefs-1.0 ttylinux-basefs-1.0'
     $ su -c 'make PACKAGE=ttylinux-devfs-1.0 ttylinux-devfs-1.0'
     $ su -c 'make PACKAGE=glibc-2.9 glibc-2.9'

You now have the environment in which you can build an arbitrary package; but
with yet another caveat that you first need to build any package that is needed
by the package you want to build e.g., alsa-libs before alsa-utils.

Any previous build of the package is overwritten.  This is handy when
developing and modifying individual packages, particularly those that are not
in the package list.

---------------------------------------------
5.5. Continuing or Resuming Build of Packages
---------------------------------------------

If a package fails to build and you fix the problem, you can continue building
the packages starting with the last failed package build; use this command:

     $ make pkgs_
or
     $ sudo make pkgs_
or
     $ su -c 'make pkgs_'

You can test this command by interrupting the package build process with CTRL-C
and then giving the "make pkgs_" command.

================
6. Build Results
================

Packages
--------

Package build results are in the pkg-bin/ directory.  All packages in this
directory are put into the ttylinux file system and bootable image.

Images
------

The build results are in the img directory; there are a file system image, a
boot CD-ROM ISO image, and maybe a CD-ROM ISO image of the source packages.

sysroot
-------

There is a sysroot directory containing the entire incremental build; the
ttylinux packages are constructed by taking some of the files from the sysroot.
Usually most files are used, but in the case of GLIBC there are many files not
used in the ttylinux package: the internationalization, i18n, and localization,
l10n, files.

The build can be interactively evaluated by executing the following command if
the ttylinux build is of the same architecture as the build host e.g., you are 
building ttylinux on a typical 32-bit or multilib x86 Linux system and build
the i486 ttylinux:

     $ . ttylinux-chroot.sh
or
     $ su -c '. ttylinux-chroot.sh'

The above command sets your top-level root directory to be the ttylinunx
sysroot, so you are still running your build system's kernel but using the
ttylinux build as the root directory.

The sysroot directory can be used as an NFS root.  If you NFS export the
sysroot directory, you can start ttylinux with a boot line something like:

     ttylinux nofsck nofirewall \
              root=nfs \
              nfsroot=X.Y.Z.P1:/<path> \
              ip=X.Y.Z.P2

Bootable CD-ROM
----------------

You can burn the boot CD-ROM ISO image to a CD-ROM and boot it; try this
command:

     $ make media
or
     $ sudo make media
or
     $ su -c 'make media'

Bootable USB Drive
------------------

See the "How_To_Flash_Drive.txt" file in this directory.


==================
7. Common Problems
==================

See the "Known_Issues_And_Problems.txt" file in this directory.


=======================
8. Bug Reports and Help
=======================

See the "How_To_Get_Help.txt" file in this directory.


[eof]
